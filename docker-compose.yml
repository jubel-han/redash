# This configuration file is for **development** setup. For production, refer to
# docker-compose.production.yml.
version: '2'
services:
  server:
    build: .
    entrypoint: /app/bin/docker-entrypoint
    command: dev_server
    user: redash
    depends_on:
      - redis
      - migrations
    ports:
      - "5000:5000"
    volumes_from:
      - migrations
    environment:
      REDASH_WEB_WORKERS: 1
    env_file: .container.env
    restart: always
  worker:
    build: .
    entrypoint: /app/bin/docker-entrypoint
    command: scheduler
    user: redash
    depends_on:
      - server
      - migrations
    volumes_from:
      - migrations
    environment:
      REDASH_WEB_WORKERS: 1
    env_file: .container.env
    restart: always
  migrations:
    build: .
    entrypoint: /app/bin/docker-entrypoint
    command: create_db
    user: redash
    depends_on:
      - postgres
    volumes:
      - ".:/app"
    env_file: .container.env
  webpack:
    build: .
    command: npm install && npm run build
    user: redash
    volumes_from:
      - migrations
  redis:
    image: redis:3.0-alpine
    restart: always
  postgres:
    image: postgres:9.5.6-alpine
    # The following turns the DB into less durable, but gains significant performance improvements for the tests run (x3
    # improvement on my personal machine). We should consider moving this into a dedicated Docker Compose configuration for
    # tests.
    command: "postgres -c fsync=off -c full_page_writes=off -c synchronous_commit=OFF"
    volumes:
       - ./postgres-data:/var/lib/postgresql/data
    restart: always
